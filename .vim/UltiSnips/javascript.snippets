snippet fl "flag"
//--------------------------------
// $0
//--------------------------------
endsnippet

snippet deac "describe action"
describe('$3', function () {
	var action;
	beforeEach(function () {
		action = {
			type: $2
		};
	});

	it('$4', function () {
		$1._handleAction(action);
		$0
	});

	it('triggers change', function () {
		$1._handleAction(action);
		expect($1.triggerChange).toHaveBeenCalled();
	});
});
endsnippet

snippet decr "describe creator"
describe('#$1', function () {
	it('dispatches a $2 action', function () {
		$4.$1($3);
		expect(dispatcher.dispatch).toHaveBeenCalledWith({
			type: $5.$2,
			$6: $3
		});
	});
});
endsnippet

snippet der "derive"
$1.prototype = Object.create($0.prototype);
$1.prototype.constructor = $1;
endsnippet

snippet di "dispatch"
dispatcher.dispatch({
	type: $0
});
endsnippet

snippet in "inject"
$1 = $injector.get('$1');
endsnippet

snippet it
it('$1', function () {
	$0
});
endsnippet

snippet de "describe"
describe('$1', function () {
	$0
});
endsnippet

snippet be "beforeEach"
beforeEach(function () {
	$0
});
endsnippet

snippet fu "function"
function ($1) {
	$0
}
endsnippet

snippet pr "prototype"
$1.prototype.$2 = function ($3) {
	$0
};
endsnippet

snippet if
if ($1) {
	$0
}
endsnippet

snippet th "this"
this.$1 = $1;
endsnippet

snippet ca "case"
case $1:
	$0
	break;
endsnippet

snippet sp "spyOn"
spyOn($1, '$2')$0;
endsnippet

snippet ja "jasmine.createSpy"
jasmine.createSpy('$1')$0;
endsnippet

snippet ex "expect"
expect($1).$2($3);
endsnippet

snippet lo "log"
console.log($1);
endsnippet
